@model List<Blue.Web.Controllers.VNetModel>

<style>
    :root {
        font-family: "Arial",serif;
        margin: 0;
        padding: 0;
    }
    html,
    body {
        box-sizing: border-box;
        margin: 0;
        /*min-width: 8192px;*/
        /*min-height: 8192px;*/
    }
    
    html {
        background: #eeeeee;
    }
    v-net {
        border-radius: 5px;
        padding: 0;
        border: 1px solid #eeeeee;
        background: white;
        color: #eeeeee;
        margin: 3px;
    }
    
    v-net.registered {
        border: 1px solid black;
        color: black;
    }
    v-net.conflict {
        border: 3px solid #ffa000;
        background: #ffc099;
    }
    v-net.hovered {
        background: lightblue;
        color: #333333;
    }
    v-net.highlighted {
        background: pink;
    }
    v-net-table {
        background: #ffffcc;
        position: fixed;
        min-height: 100px;
        min-width: 100px;
        bottom: 0;
        left: 0;
        border: 1px solid gray;
        border-radius: 5px;
    }
    v-net-table > td {
        border: 0;
    }
    tr.highlighted {
        background: pink;
    }
    
</style>

<div id="zoomer" style="width: 100vw; height: 100vh; box-sizing: border-box; overflow: scroll;">
    <v-net id="net" cidr="10.0.0.0/8" name="all" style="margin:1000px;">

    </v-net>
</div>
<v-net-table>

</v-net-table>

<script src="/content/vnet.js"></script>
<script>

(function() {

    const model = VNetModel.load(@Html.Raw(Json.Serialize(Model)));

    document.getElementById("net").model = model;
    document.getElementsByTagName("v-net-table")[0].model = model;

    
    const body = document.getElementsByTagName("v-net")[0];
    const p = body.parentElement;
    zoomer(body);

    function zoomer(body) {
        const isMac = window.navigator.userAgent.indexOf("Mac") !== -1;

        let metaPressed = false;

        document.addEventListener("keydown", function(e) {
            metaPressed = isMac ? e.metaKey : e.ctrlKey;

            if (!metaPressed) {
                return;
            }

            switch(e.key){
                case "0":
                    e.preventDefault();
                    resetZoom();
                    break;
                case "+":
                    e.preventDefault();
                    zoom(speed);
                    break;
                case "-":
                    e.preventDefault();
                    zoom(-speed);
                    break;
                case "s":
                    e.preventDefault();
                    model.save();
                    break;
            }

        });

        let currentZoom = 1;
        const speed = .015;

        document.addEventListener("wheel", function(e) {
            
            if (isMac && !e.metaKey || !isMac && !e.ctrlKey) {
                return;
            }
            zoom(-e.deltaY / 314, e);
        });

        function resetZoom() {
            currentZoom = 1;
            body.style.transform = "";
        }

        function zoom(delta, e) {
            
            if (delta > 0 && currentZoom >= 4 || delta < 0 && currentZoom <= .1) {
                return;
            }
            
            currentZoom += delta;

            body.style.transform = `scale(${currentZoom})`;
            body.style.transformOrigin = "top left";

            // This is what the scrollparent already scrolled, towards top left.
            const scrolledX = delta * p.offsetWidth;
            const scrolledY = delta * p.offsetHeight;
            
            const width = p.offsetWidth / 2;
            const height = p.offsetHeight / 2;
            
            // We are scrolling the same amount as the parent did + whatever mouse pointer indicates from the center.
            // (Minus is towards top left. So we do plus)
            const scrollX = (e.x - width) / width * scrolledX + scrolledX;
            const scrollY = (e.y - height) / height * scrolledY + scrolledY;
            
            console.log(`delta: ${delta} scrolledX: ${scrolledX} scrolledY: ${scrolledY} scrollX: ${scrollX} scrollY: ${scrollY}`);
            p.scrollBy(scrollX, scrollY);
        }
        p.scroll(1000, 1000);
    }
})();
</script>